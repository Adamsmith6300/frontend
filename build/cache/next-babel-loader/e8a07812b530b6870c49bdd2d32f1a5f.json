{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createWrapper, HYDRATE } from \"next-redux-wrapper\";\nimport middleware from \"./middleware\";\nimport actionTypes from \"./actions\";\nvar initialState = {\n  val: \"\"\n}; // create your reducer\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case actionTypes.ERROR_SUBMIT_FORM_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formError: action.payload\n      });\n\n    case actionTypes.SIGNUP_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        successfulSignup: true\n      });\n\n    case actionTypes.LOGIN_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        successfulLogin: true\n      });\n\n    case actionTypes.VERIFY_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        verifiedUser: true\n      });\n\n    default:\n      return state;\n  }\n}; // create a makeStore function\n\n\nvar makeStore = function makeStore(context) {\n  return createStore(reducer, compose(applyMiddleware.apply(void 0, [thunk].concat(_toConsumableArray(middleware)))));\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":null,"metadata":{},"sourceType":"module"}