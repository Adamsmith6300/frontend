{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\nconst actionTypes = {\n  TEST: \"TEST\",\n  SIGNUP_SUCCESS: \"SIGNUP_SUCCESS\",\n  VERIFY_SUCCESS: \"VERIFY_SUCCESS\",\n  LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n  ERROR_SUBMIT_FORM_DATA: \"ERROR_SUBMIT_FORM_DATA\"\n};\nconst actions = {\n  setTest: val => {\n    return {\n      type: actionTypes.TEST,\n      payload: val\n    };\n  },\n  submitSignup: formData => {\n    delete formData[\"RePassword\"];\n    return async dispatch => {\n      let resp = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup`, formData).then(function (response) {\n        console.log(response);\n        dispatch({\n          type: actionTypes.SIGNUP_SUCCESS\n        });\n      }).catch(function (error) {\n        console.log(error.response);\n\n        if (error.response.data.includes(\"UsernameExistsException\")) {\n          dispatch({\n            type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n            payload: \"Username exists!\"\n          });\n        }\n      });\n    };\n  },\n  verifyUser: data => {\n    console.log(data);\n    return async dispatch => {\n      let resp = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup/verify`, data).then(function (response) {\n        console.log(response);\n        dispatch({\n          type: actionTypes.VERIFY_SUCCESS\n        });\n      }).catch(function (error) {\n        console.log(error.response);\n\n        if (error) {\n          dispatch({\n            type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n            payload: \"Failed to verify!\"\n          });\n        }\n      });\n    };\n  },\n  submitLogin: formData => {\n    return async dispatch => {\n      let resp = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/people/login`, formData).then(function (response) {\n        console.log(response);\n        dispatch({\n          type: actionTypes.LOGIN_SUCCESS\n        });\n      }).catch(function (error) {\n        console.log(error.response);\n\n        if (error) {\n          dispatch({\n            type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n            payload: \"Email or password are invalid!\"\n          });\n        }\n      });\n    };\n  }\n};\nexport default _objectSpread(_objectSpread({}, actionTypes), actions);","map":null,"metadata":{},"sourceType":"module"}