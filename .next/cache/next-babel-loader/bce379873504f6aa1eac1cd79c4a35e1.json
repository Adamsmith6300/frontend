{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from \"axios\";\nimport { saveLoginSession } from \"./helpers\";\nvar actionTypes = {\n  TEST: \"TEST\",\n  SIGNUP_SUCCESS: \"SIGNUP_SUCCESS\",\n  VERIFY_SUCCESS: \"VERIFY_SUCCESS\",\n  VERIFY_FAILED: \"VERIFY_FAILED\",\n  LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n  ERROR_SUBMIT_FORM_DATA: \"ERROR_SUBMIT_FORM_DATA\",\n  RESEND_SUCCESS: \"RESEND_SUCCESS\"\n};\nvar actions = {\n  setTest: function setTest(val) {\n    return {\n      type: actionTypes.TEST,\n      payload: val\n    };\n  },\n  submitSignup: function submitSignup(formData) {\n    delete formData[\"RePassword\"];\n    return /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.post(\"\".concat(process.env.NEXT_PUBLIC_API_URL, \"/people/signup\"), formData).then(function (response) {\n                  console.log(response);\n                  dispatch({\n                    type: actionTypes.SIGNUP_SUCCESS\n                  });\n                })[\"catch\"](function (error) {\n                  console.log(error.response);\n\n                  if (error.response.data.includes(\"UsernameExistsException\")) {\n                    dispatch({\n                      type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n                      payload: \"Username exists!\"\n                    });\n                  }\n                });\n\n              case 2:\n                resp = _context.sent;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  },\n  verifyUser: function verifyUser(data) {\n    console.log(data);\n    return /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.post(\"\".concat(process.env.NEXT_PUBLIC_API_URL, \"/people/signup/verify\"), data).then(function (response) {\n                  console.log(response);\n                  dispatch({\n                    type: actionTypes.VERIFY_SUCCESS\n                  });\n                })[\"catch\"](function (error) {\n                  console.log(error.response);\n\n                  if (error.response.data == \"Account already verified!\" || error.response.data == \"Account already exists for this alias!\") {\n                    dispatch({\n                      type: actionTypes.VERIFY_FAILED,\n                      payload: error.response.data\n                    });\n                  } else {\n                    dispatch({\n                      type: actionTypes.VERIFY_FAILED,\n                      payload: \"Failed to verify!\"\n                    });\n                  }\n                });\n\n              case 2:\n                resp = _context2.sent;\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  },\n  submitLogin: function submitLogin(formData) {\n    return /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return axios.post(\"\".concat(process.env.NEXT_PUBLIC_API_URL, \"/people/login\"), formData).then(function (response) {\n                  console.log(response);\n                  saveLoginSession(response);\n                  dispatch({\n                    type: actionTypes.LOGIN_SUCCESS\n                  });\n                })[\"catch\"](function (error) {\n                  console.log(error.response);\n\n                  if (error) {\n                    dispatch({\n                      type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n                      payload: \"Email or password are invalid!\"\n                    });\n                  }\n                });\n\n              case 2:\n                resp = _context3.sent;\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  },\n  submitResend: function submitResend(formData) {\n    return /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return axios.post(\"\".concat(process.env.NEXT_PUBLIC_API_URL, \"/people/signup/resend\"), formData).then(function (response) {\n                  console.log(response);\n                  dispatch({\n                    type: actionTypes.RESEND_SUCCESS\n                  });\n                })[\"catch\"](function (error) {\n                  console.log(error.response);\n\n                  if (error) {\n                    dispatch({\n                      type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n                      payload: \"Invalid email!\"\n                    });\n                  }\n                });\n\n              case 2:\n                resp = _context4.sent;\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n  }\n};\nexport default _objectSpread(_objectSpread({}, actionTypes), actions);","map":{"version":3,"sources":["/home/adam/loma/frontend/store/actions.js"],"names":["axios","saveLoginSession","actionTypes","TEST","SIGNUP_SUCCESS","VERIFY_SUCCESS","VERIFY_FAILED","LOGIN_SUCCESS","ERROR_SUBMIT_FORM_DATA","RESEND_SUCCESS","actions","setTest","val","type","payload","submitSignup","formData","dispatch","post","process","env","NEXT_PUBLIC_API_URL","then","response","console","log","error","data","includes","resp","verifyUser","submitLogin","submitResend"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { saveLoginSession } from \"./helpers\"\n\n\nconst actionTypes = {\n  TEST: \"TEST\",\n  SIGNUP_SUCCESS: \"SIGNUP_SUCCESS\",\n  VERIFY_SUCCESS: \"VERIFY_SUCCESS\",\n  VERIFY_FAILED:\"VERIFY_FAILED\",\n  LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n  ERROR_SUBMIT_FORM_DATA: \"ERROR_SUBMIT_FORM_DATA\",\n  RESEND_SUCCESS: \"RESEND_SUCCESS\"\n};\n\nconst actions = {\n  setTest: (val) => {\n    return {\n      type: actionTypes.TEST,\n      payload: val,\n    };\n  },\n  submitSignup: (formData) => {\n    delete formData[\"RePassword\"];\n    return async (dispatch) => {\n      let resp = await axios\n        .post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup`, formData)\n        .then(function (response) {\n          console.log(response);\n          dispatch({ type: actionTypes.SIGNUP_SUCCESS });\n        })\n        .catch(function (error) {\n          console.log(error.response);\n          if (error.response.data.includes(\"UsernameExistsException\")) {\n            dispatch({\n              type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n              payload: \"Username exists!\",\n            });\n          }\n        });\n    };\n  },\n  verifyUser: (data) => {\n    console.log(data)\n    return async (dispatch) => {\n      const resp = await axios\n        .post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup/verify`, data)\n        .then(function (response) {\n          console.log(response);\n          dispatch({ type: actionTypes.VERIFY_SUCCESS });\n        })\n        .catch(function (error) {\n          console.log(error.response);\n          if (error.response.data == \"Account already verified!\" || error.response.data == \"Account already exists for this alias!\") {\n            dispatch({\n              type: actionTypes.VERIFY_FAILED,\n              payload: error.response.data,\n            });\n          } else {\n            dispatch({ type: actionTypes.VERIFY_FAILED, payload: \"Failed to verify!\" });\n          }\n        });\n    };\n  },\n  submitLogin: (formData) => {\n    return async (dispatch) => {\n      const resp = await axios\n        .post(`${process.env.NEXT_PUBLIC_API_URL}/people/login`, formData)\n        .then(function (response) {\n          console.log(response);\n          saveLoginSession(response);\n          dispatch({ type: actionTypes.LOGIN_SUCCESS });\n        })\n        .catch(function (error) {\n          console.log(error.response);\n          if (error) {\n            dispatch({\n              type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n              payload: \"Email or password are invalid!\",\n            });\n          }\n        });\n    };\n  },\n  submitResend: (formData) => {\n    return async (dispatch) => {\n      const resp = await axios\n        .post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup/resend`, formData)\n        .then(function (response) {\n          console.log(response);\n          dispatch({ type: actionTypes.RESEND_SUCCESS });\n        })\n        .catch(function (error) {\n          console.log(error.response);\n          if (error) {\n            dispatch({\n              type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n              payload: \"Invalid email!\",\n            });\n          }\n        });\n    };\n  }, \n};\n\nexport default {\n  // TYPES\n  ...actionTypes,\n  // ACTIONS\n  ...actions,\n};\n"]},"metadata":{},"sourceType":"module"}