{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\nconst actionTypes = {\n  TEST: \"TEST\",\n  SIGNUP_SUCCESS: \"SIGNUP_SUCCESS\",\n  VERIFY_SUCCESS: \"VERIFY_SUCCESS\",\n  VERIFY_FAILED: \"VERIFY_FAILED\",\n  LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n  ERROR_SUBMIT_FORM_DATA: \"ERROR_SUBMIT_FORM_DATA\"\n};\nconst actions = {\n  setTest: val => {\n    return {\n      type: actionTypes.TEST,\n      payload: val\n    };\n  },\n  submitSignup: formData => {\n    delete formData[\"RePassword\"];\n    return async dispatch => {\n      let resp = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup`, formData).then(function (response) {\n        console.log(response);\n        dispatch({\n          type: actionTypes.SIGNUP_SUCCESS\n        });\n      }).catch(function (error) {\n        console.log(error.response);\n\n        if (error.response.data.includes(\"UsernameExistsException\")) {\n          dispatch({\n            type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n            payload: \"Username exists!\"\n          });\n        }\n      });\n    };\n  },\n  verifyUser: data => {\n    console.log(data);\n    return async dispatch => {\n      const resp = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup/verify`, data).then(function (response) {\n        console.log(response);\n\n        if (response.statusCode == 200) {\n          dispatch({\n            type: actionTypes.VERIFY_SUCCESS\n          });\n        } else {\n          switch (response.data) {\n            default:\n            case \"Invalid Input!\":\n              dispatch({\n                type: actionTypes.VERIFY_FAILED,\n                payload: \"Failed to verify!\"\n              });\n              break;\n\n            case \"User already verified!\":\n              dispatch({\n                type: actionTypes.VERIFY_FAILED,\n                payload: response.data\n              });\n              break;\n          }\n        }\n      }).catch(function (error) {\n        console.log(error.response);\n\n        if (error) {\n          dispatch({\n            type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n            payload: \"Failed to verify!\"\n          });\n        }\n      });\n    };\n  },\n  submitLogin: formData => {\n    return async dispatch => {\n      let resp = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/people/login`, formData).then(function (response) {\n        console.log(response);\n        dispatch({\n          type: actionTypes.LOGIN_SUCCESS\n        });\n      }).catch(function (error) {\n        console.log(error.response);\n\n        if (error) {\n          dispatch({\n            type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n            payload: \"Email or password are invalid!\"\n          });\n        }\n      });\n    };\n  }\n};\nexport default _objectSpread(_objectSpread({}, actionTypes), actions);","map":{"version":3,"sources":["/home/adam/loma/frontend/store/actions.js"],"names":["axios","actionTypes","TEST","SIGNUP_SUCCESS","VERIFY_SUCCESS","VERIFY_FAILED","LOGIN_SUCCESS","ERROR_SUBMIT_FORM_DATA","actions","setTest","val","type","payload","submitSignup","formData","dispatch","resp","post","process","env","NEXT_PUBLIC_API_URL","then","response","console","log","catch","error","data","includes","verifyUser","statusCode","submitLogin"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst actionTypes = {\n  TEST: \"TEST\",\n  SIGNUP_SUCCESS: \"SIGNUP_SUCCESS\",\n  VERIFY_SUCCESS: \"VERIFY_SUCCESS\",\n  VERIFY_FAILED:\"VERIFY_FAILED\",\n  LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n  ERROR_SUBMIT_FORM_DATA: \"ERROR_SUBMIT_FORM_DATA\",\n};\n\nconst actions = {\n  setTest: (val) => {\n    return {\n      type: actionTypes.TEST,\n      payload: val,\n    };\n  },\n  submitSignup: (formData) => {\n    delete formData[\"RePassword\"];\n    return async (dispatch) => {\n      let resp = await axios\n        .post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup`, formData)\n        .then(function (response) {\n          console.log(response);\n          dispatch({ type: actionTypes.SIGNUP_SUCCESS });\n        })\n        .catch(function (error) {\n          console.log(error.response);\n          if (error.response.data.includes(\"UsernameExistsException\")) {\n            dispatch({\n              type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n              payload: \"Username exists!\",\n            });\n          }\n        });\n    };\n  },\n  verifyUser: (data) => {\n    console.log(data)\n    return async (dispatch) => {\n      const resp = await axios\n        .post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup/verify`, data)\n        .then(function (response) {\n          console.log(response);\n          if (response.statusCode == 200) {\n            dispatch({ type: actionTypes.VERIFY_SUCCESS });\n          } else {\n            switch (response.data) {\n              default:\n              case \"Invalid Input!\":\n                dispatch({ type: actionTypes.VERIFY_FAILED, payload: \"Failed to verify!\" });\n                break;\n              case \"User already verified!\":\n                dispatch({ type: actionTypes.VERIFY_FAILED, payload: response.data });\n                break;\n            }\n          }\n        })\n        .catch(function (error) {\n          console.log(error.response);\n          if (error) {\n            dispatch({\n              type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n              payload: \"Failed to verify!\",\n            });\n          }\n        });\n    };\n  },\n  submitLogin: (formData) => {\n    return async (dispatch) => {\n      let resp = await axios\n        .post(`${process.env.NEXT_PUBLIC_API_URL}/people/login`, formData)\n        .then(function (response) {\n          console.log(response);\n          dispatch({ type: actionTypes.LOGIN_SUCCESS });\n        })\n        .catch(function (error) {\n          console.log(error.response);\n          if (error) {\n            dispatch({\n              type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n              payload: \"Email or password are invalid!\",\n            });\n          }\n        });\n    };\n  },\n};\n\nexport default {\n  // TYPES\n  ...actionTypes,\n  // ACTIONS\n  ...actions,\n};\n"]},"metadata":{},"sourceType":"module"}