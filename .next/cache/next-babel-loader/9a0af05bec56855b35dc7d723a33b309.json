{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createWrapper, HYDRATE } from \"next-redux-wrapper\";\nimport middleware from \"./middleware\";\nimport actionTypes from \"./actions\";\nconst initialState = {}; // create your reducer\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case actionTypes.ERROR_SUBMIT_FORM_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formError: action.payload\n      });\n\n    case actionTypes.SIGNUP_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        successfulSignup: true\n      });\n\n    case actionTypes.LOGIN_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        successfulLogin: true\n      });\n\n    case actionTypes.VERIFY_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        verifiedUser: true\n      });\n\n    case actionTypes.VERIFY_FAILED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload\n      });\n\n    case actionTypes.ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload\n      });\n\n    case actionTypes.GET_PRODUCTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        products: action.payload\n      });\n\n    default:\n      return state;\n  }\n}; // create a makeStore function\n\n\nconst makeStore = context => createStore(reducer, compose(applyMiddleware(thunk, ...middleware))); // export an assembled wrapper\n\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":null,"metadata":{},"sourceType":"module"}