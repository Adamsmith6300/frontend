{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\nimport { saveLoginSession } from \"./helpers\";\nconst actionTypes = {\n  ERROR: \"ERROR\",\n  SIGNUP_SUCCESS: \"SIGNUP_SUCCESS\",\n  VERIFY_SUCCESS: \"VERIFY_SUCCESS\",\n  VERIFY_FAILED: \"VERIFY_FAILED\",\n  LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n  ERROR_SUBMIT_FORM_DATA: \"ERROR_SUBMIT_FORM_DATA\",\n  RESEND_SUCCESS: \"RESEND_SUCCESS\",\n  GET_PRODUCTS: \"GET_PRODUCTS\"\n};\nconst actions = {\n  submitSignup: formData => {\n    delete formData[\"RePassword\"];\n    return async dispatch => {\n      let resp = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup`, formData).then(function (response) {\n        console.log(response);\n        dispatch({\n          type: actionTypes.SIGNUP_SUCCESS\n        });\n      }).catch(function (error) {\n        console.log(error.response);\n\n        if (error.response.data.includes(\"UsernameExistsException\")) {\n          dispatch({\n            type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n            payload: \"Username exists!\"\n          });\n        }\n      });\n    };\n  },\n  verifyUser: data => {\n    console.log(data);\n    return async dispatch => {\n      const resp = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup/verify`, data).then(function (response) {\n        console.log(response);\n        dispatch({\n          type: actionTypes.VERIFY_SUCCESS\n        });\n      }).catch(function (error) {\n        console.log(error.response);\n\n        if (error.response.data == \"Account already verified!\" || error.response.data == \"Account already exists for this alias!\") {\n          dispatch({\n            type: actionTypes.VERIFY_FAILED,\n            payload: error.response.data\n          });\n        } else {\n          dispatch({\n            type: actionTypes.VERIFY_FAILED,\n            payload: \"Failed to verify!\"\n          });\n        }\n      });\n    };\n  },\n  submitLogin: formData => {\n    return async dispatch => {\n      const resp = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/people/login`, formData).then(function (response) {\n        console.log(response);\n        saveLoginSession(response);\n        dispatch({\n          type: actionTypes.LOGIN_SUCCESS\n        });\n      }).catch(function (error) {\n        console.log(error.response);\n\n        if (error) {\n          dispatch({\n            type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n            payload: \"Email or password are invalid!\"\n          });\n        }\n      });\n    };\n  },\n  submitResend: formData => {\n    return async dispatch => {\n      const resp = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup/resend`, formData).then(function (response) {\n        console.log(response);\n        dispatch({\n          type: actionTypes.RESEND_SUCCESS\n        });\n      }).catch(function (error) {\n        console.log(error.response);\n\n        if (error) {\n          dispatch({\n            type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n            payload: \"Invalid email!\"\n          });\n        }\n      });\n    };\n  },\n  getProducts: () => {\n    return async dispatch => {\n      const resp = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/market/products`).then(function (response) {\n        console.log(response);\n        dispatch({\n          type: actionTypes.GET_PRODUCTS,\n          payload: response.data\n        });\n      }).catch(function (error) {\n        console.log(error.response);\n        dispatch({\n          type: actionTypes.ERROR,\n          payload: \"FAILED TO GET PRODUCTS\"\n        });\n      });\n    };\n  }\n};\nexport default _objectSpread(_objectSpread({}, actionTypes), actions);","map":{"version":3,"sources":["/home/adam/loma/frontend/store/actions.js"],"names":["axios","saveLoginSession","actionTypes","ERROR","SIGNUP_SUCCESS","VERIFY_SUCCESS","VERIFY_FAILED","LOGIN_SUCCESS","ERROR_SUBMIT_FORM_DATA","RESEND_SUCCESS","GET_PRODUCTS","actions","submitSignup","formData","dispatch","resp","post","process","env","NEXT_PUBLIC_API_URL","then","response","console","log","type","catch","error","data","includes","payload","verifyUser","submitLogin","submitResend","getProducts","get"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { saveLoginSession } from \"./helpers\"\n\n\nconst actionTypes = {\n  ERROR:\"ERROR\",\n  SIGNUP_SUCCESS: \"SIGNUP_SUCCESS\",\n  VERIFY_SUCCESS: \"VERIFY_SUCCESS\",\n  VERIFY_FAILED:\"VERIFY_FAILED\",\n  LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n  ERROR_SUBMIT_FORM_DATA: \"ERROR_SUBMIT_FORM_DATA\",\n  RESEND_SUCCESS: \"RESEND_SUCCESS\",\n  GET_PRODUCTS:\"GET_PRODUCTS\"\n};\n\nconst actions = {\n  submitSignup: (formData) => {\n    delete formData[\"RePassword\"];\n    return async (dispatch) => {\n      let resp = await axios\n        .post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup`, formData)\n        .then(function (response) {\n          console.log(response);\n          dispatch({ type: actionTypes.SIGNUP_SUCCESS });\n        })\n        .catch(function (error) {\n          console.log(error.response);\n          if (error.response.data.includes(\"UsernameExistsException\")) {\n            dispatch({\n              type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n              payload: \"Username exists!\",\n            });\n          }\n        });\n    };\n  },\n  verifyUser: (data) => {\n    console.log(data)\n    return async (dispatch) => {\n      const resp = await axios\n        .post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup/verify`, data)\n        .then(function (response) {\n          console.log(response);\n          dispatch({ type: actionTypes.VERIFY_SUCCESS });\n        })\n        .catch(function (error) {\n          console.log(error.response);\n          if (error.response.data == \"Account already verified!\" || error.response.data == \"Account already exists for this alias!\") {\n            dispatch({\n              type: actionTypes.VERIFY_FAILED,\n              payload: error.response.data,\n            });\n          } else {\n            dispatch({ type: actionTypes.VERIFY_FAILED, payload: \"Failed to verify!\" });\n          }\n        });\n    };\n  },\n  submitLogin: (formData) => {\n    return async (dispatch) => {\n      const resp = await axios\n        .post(`${process.env.NEXT_PUBLIC_API_URL}/people/login`, formData)\n        .then(function (response) {\n          console.log(response);\n          saveLoginSession(response);\n          dispatch({ type: actionTypes.LOGIN_SUCCESS });\n        })\n        .catch(function (error) {\n          console.log(error.response);\n          if (error) {\n            dispatch({\n              type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n              payload: \"Email or password are invalid!\",\n            });\n          }\n        });\n    };\n  },\n  submitResend: (formData) => {\n    return async (dispatch) => {\n      const resp = await axios\n        .post(`${process.env.NEXT_PUBLIC_API_URL}/people/signup/resend`, formData)\n        .then(function (response) {\n          console.log(response);\n          dispatch({ type: actionTypes.RESEND_SUCCESS });\n        })\n        .catch(function (error) {\n          console.log(error.response);\n          if (error) {\n            dispatch({\n              type: actionTypes.ERROR_SUBMIT_FORM_DATA,\n              payload: \"Invalid email!\",\n            });\n          }\n        });\n    };\n  },\n  getProducts: () => {\n    return async (dispatch) => {\n      const resp = await axios\n        .get(`${process.env.NEXT_PUBLIC_API_URL}/market/products`)\n        .then(function (response) {\n          console.log(response);\n          dispatch({ type: actionTypes.GET_PRODUCTS, payload: response.data });\n        })\n        .catch(function (error) {\n          console.log(error.response);\n          dispatch({\n            type: actionTypes.ERROR,\n            payload: \"FAILED TO GET PRODUCTS\",\n          });\n        });\n    };\n  }\n};\n\nexport default {\n  // TYPES\n  ...actionTypes,\n  // ACTIONS\n  ...actions,\n};\n"]},"metadata":{},"sourceType":"module"}